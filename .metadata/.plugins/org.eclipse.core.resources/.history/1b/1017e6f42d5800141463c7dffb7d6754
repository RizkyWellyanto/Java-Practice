// CIS 1C Assignment #1

// /* Part A - use block comment to remove this version
// Part A - int version

import java.util.*;

//------------------------------------------------------
public class Foothill
{
   // -------  main --------------
   public static void main(String[] args) throws Exception
   {
      int target = 99;
      ArrayList<Integer> dataSet = new ArrayList<Integer>();
      ArrayList<Sublist> choices = new ArrayList<Sublist>();
      int k, j, numSets, max, kBest, masterSum;
      boolean foundPerfect;

      dataSet.add(2); dataSet.add(12); dataSet.add(22);
      dataSet.add(5); dataSet.add(15); dataSet.add(25);
      dataSet.add(9); dataSet.add(19); dataSet.add(29);

      choices.clear();
      System.out.println("Target time: " + target);
      
      // dispose of easy case immediately to save lots ot time
      masterSum = (int)computeMasterSum(dataSet);
      if ( target >= masterSum )
      {
         System.out.println( "Solution is entire master set with sum = "
               +  masterSum );
         showEntireVector(dataSet);
         return;
      }

      choices.add( new Sublist( dataSet ) ); // this represents the 0 set

      foundPerfect = false;
      for (k = 0; k < dataSet.size() && !foundPerfect; k++)
      {
         // for each set so far create a new one containing that set U k
         numSets = choices.size(); // size before we start adding more
         for (j = 0; j < numSets; j++)
         {
            if ( choices.get(j).getSum() +  dataSet.get(k) <= target )
               choices.add( choices.get(j).addItem(k) );

            if ( choices.get(j).getSum() +  dataSet.get(k) == target )
            {
               foundPerfect = true;
               break;
            }
         }
      }

      max = kBest = 0;
      for (k = 0; k < choices.size(); k++ )
      {
         if ( choices.get(k).getSum() > max )
         {
            max = choices.get(k).getSum();
            kBest = k;
         }
      }

      choices.get(kBest).showSublist();
   }
   
   // client algorithm helper functions ---------------------------
   static double computeMasterSum( ArrayList<Integer> data )
   {
      int k, numSets;
      double masterSum;

      numSets = data.size();
      masterSum = 0;
      for (k = 0; k < numSets ; k++)
         masterSum += data.get(k);
      return masterSum;
   }
   
   static void showEntireVector( ArrayList<Integer> data )
   {
      int k, numSets;

      numSets = data.size();
      for (k = 0; k < numSets ; k++)
         System.out.print( "  array[" + k + "] = "
               +  data.get(k)
               + ( (k == numSets-1)? "\n\n" : ", " ) );  
   }
}

//--------------- Class Sublist Definition ---------------
class Sublist implements Cloneable
{
   private int sum = 0;
   private ArrayList<Integer> originalObjects;
   private ArrayList<Integer> indices;
   
   // constructor creates an empty Sublist (no indices)
   public Sublist(ArrayList<Integer> orig)
   {
      sum = 0;
      originalObjects = orig;
      indices = new ArrayList<Integer>();
   }
   
   int getSum() { return sum; }
   
   public Object clone() throws CloneNotSupportedException
   {
      // shallow copy
      Sublist newObject = (Sublist)super.clone();
      // deep copy
      newObject.indices = (ArrayList<Integer>)indices.clone();
      
      return newObject;
   }
   
   Sublist addItem( int indexOfItemToAdd )
   {
      Sublist newSublist;

      try
      {
         newSublist = (Sublist)this.clone(); //  copy old values, then ...

         newSublist.sum = newSublist.sum
            + originalObjects.get(indexOfItemToAdd);
         newSublist.indices.add(indexOfItemToAdd);
         return newSublist;
      }
      catch (CloneNotSupportedException e)
      {
         return null;
      }
   }
   
   void showSublist()
   {
      int k;
      
      System.out.println("Sublist ----------------------------- ");
      System.out.println("  sum: "+ sum);
      for ( k = 0; k < (int)indices.size(); k++)
         System.out.println("  array[" + indices.get(k) + "] = "
            + originalObjects.get( indices.get(k) )
            + ( (k == (int)indices.size() - 1)? "\n\n" : ", " ) );  
   }

}


/* ---------------------- RUNS ------------------------------
Target time: 13
Sublist -----------------------------
  sum: 12
  array[1] = 12

Target time: 37
Sublist -----------------------------
  sum: 37
  array[2] = 22,
  array[4] = 15

Target time: 92
Sublist -----------------------------
  sum: 92
  array[1] = 12,
  array[2] = 22,
  array[3] = 5,
  array[5] = 25,
  array[6] = 9,
  array[7] = 19

Target time: 120
Sublist -----------------------------
  sum: 119
  array[0] = 2,
  array[1] = 12,
  array[2] = 22,
  array[3] = 5,
  array[4] = 15,
  array[5] = 25,
  array[6] = 9,
  array[8] = 29
----------------------------- */


// -----------------------------------------------------------------------


/* Part B - use block comment to remove this version  */

// CIS 1C Assignment #1
// Part B - iTunes Version

import cs_1c.*;
import java.text.*;
import java.util.*;

//------------------------------------------------------
public class Foothill
{
   // -------  main --------------
   public static void main(String[] args) throws Exception
   {
      int target = 4000;
      ArrayList<iTunesEntry> dataSet = new ArrayList<iTunesEntry>();
      ArrayList<Sublist> choices = new ArrayList<Sublist>();
      int k, j, numSets, max, kBest, arraySize, masterSum;
      boolean foundPerfect;
      
      // for formatting and timing
      NumberFormat tidy = NumberFormat.getInstance(Locale.US);
      tidy.setMaximumFractionDigits(4);
      long startTime, stopTime;
      
      // read the iTunes Data
      iTunesEntryReader tunesInput = new iTunesEntryReader("itunes_file.txt");

      // test the success of the read:
      if (tunesInput.readError())
      {
         System.out.println("couldn't open " + tunesInput.getFileName()
            + " for input.");
         return;
      }

      // load the dataSet ArrayList with the iTunes:
      arraySize = tunesInput.getNumTunes();
      for (k = 0; k < arraySize; k++)
         dataSet.add(tunesInput.getTune(k));

      choices.clear();
      System.out.println("Target time: " + target);
      
      // dispose of easy case immediately to save lots ot time
      masterSum = (int)computeMasterSum(dataSet);
      if ( target >= masterSum )
      {
         System.out.println( "Solution is entire master set with sum = "
               +  masterSum );
         showEntireVector(dataSet);
         return;
      }

      // START TIMING THE ALGORITHM
      startTime = System.nanoTime();
      choices.add( new Sublist( dataSet ) ); // this represents the 0 set

      foundPerfect = false;
      for (k = 0; k < dataSet.size() && !foundPerfect; k++)
      {
         // for each set so far create a new one containing that set U k
         numSets = choices.size(); // size before we start adding more
         for (j = 0; j < numSets; j++)
         {
            if (choices.get(j).getSum() + dataSet.get(k).getTime() <= target)
               choices.add( choices.get(j).addItem(k) );

            if (choices.get(j).getSum() + dataSet.get(k).getTime() == target)
            {
               foundPerfect = true;
               break;
            }
         }
      }

      max = kBest = 0;
      for (k = 0; k < choices.size(); k++ )
      {
         if ( choices.get(k).getSum() > max )
         {
            max = choices.get(k).getSum();
            kBest = k;
         }
      }

      // END TIMING
      stopTime = System.nanoTime();
      
      choices.get(kBest).showSublist();
      
      // report algorithm time
      System.out.println("Algorithm Elapsed Time: "
         + tidy.format( (stopTime - startTime) / 1e9)
         + " seconds.");
   }
   
   // client algorithm helper functions ---------------------------
   static double computeMasterSum( ArrayList<iTunesEntry> data )
   {
      int k, numSets;
      double masterSum;

      numSets = data.size();
      masterSum = 0;
      for (k = 0; k < numSets ; k++)
         masterSum += data.get(k).getTime();
      return masterSum;
   }
   
   static void showEntireVector( ArrayList<iTunesEntry> data )
   {
      int k, numSets;

      numSets = data.size();
      for (k = 0; k < numSets ; k++)
         System.out.print( "  array[" + k + "] = "
               +  data.get(k)
               + ( (k == numSets-1)? "\n\n" : ", " ) );  
   }
}

//--------------- Class Sublist Definition ---------------
class Sublist implements Cloneable
{
   private int sum = 0;
   private ArrayList<iTunesEntry> originalObjects;
   private ArrayList<Integer> indices;
   
   // constructor creates an empty Sublist (no indices)
   public Sublist(ArrayList<iTunesEntry> orig)
   {
      sum = 0;
      originalObjects = orig;
      indices = new ArrayList<Integer>();
   }
   
   int getSum() { return sum; }
   
   public Object clone() throws CloneNotSupportedException
   {
      // shallow copy
      Sublist newObject = (Sublist)super.clone();
      // deep copy
      newObject.indices = (ArrayList<Integer>)indices.clone();
      
      return newObject;
   }
   
   Sublist addItem( int indexOfItemToAdd )
   {
      Sublist newSublist;

      try
      {
         newSublist = (Sublist)this.clone(); //  copy old values, then ...

         newSublist.sum = newSublist.sum
            + originalObjects.get(indexOfItemToAdd).getTime();
         newSublist.indices.add(indexOfItemToAdd);
         return newSublist;
      }
      catch (CloneNotSupportedException e)
      {
         return null;
      }
   }
   
   void showSublist()
   {
      int k;
      
      System.out.println("Sublist ----------------------------- ");
      System.out.println("  sum: "+ sum);
      for ( k = 0; k < (int)indices.size(); k++)
         System.out.println("  array[" + indices.get(k) + "] = "
            + originalObjects.get( indices.get(k) )
            + ( (k == (int)indices.size() - 1)? "\n\n" : ", " ) );  
   }
}


/* --------- output -----------

Run #1:

Target time: 1201
Sublist -----------------------------
  sum: 1201
  array[0] = Carrie Underwood | Cowboy Casanova |  3:56,
  array[3] = Foo Fighters | All My Life |  4:23,
  array[6] = Eric Clapton | Bad Love |  5:08,
  array[7] = Howlin' Wolf | Everybody's In The Mood |  2:58,
  array[9] = Reverend Gary Davis | Samson and Delilah |  3:36


Algorithm Elapsed Time: 0.0042 seconds.

Run #2:
Target time: 3600
Sublist -----------------------------
  sum: 3600
  array[0] = Carrie Underwood | Cowboy Casanova |  3:56,
  array[1] = Carrie Underwood | Quitter |  3:40,
  array[2] = Rihanna | Russian Roulette |  3:48,
  array[4] = Foo Fighters | Monkey Wrench |  3:50,
  array[5] = Eric Clapton | Pretending |  4:43,
  array[6] = Eric Clapton | Bad Love |  5:08,
  array[7] = Howlin' Wolf | Everybody's In The Mood |  2:58,
  array[8] = Howlin' Wolf | Well That's All Right |  2:55,
  array[9] = Reverend Gary Davis | Samson and Delilah |  3:36,
  array[11] = Roy Buchanan | Hot Cha |  3:28,
  array[12] = Roy Buchanan | Green Onions |  7:23,
  array[13] = Janiva Magness | I'm Just a Prisoner |  3:50,
  array[14] = Janiva Magness | You Were Never Mine |  4:36,
  array[15] = John Lee Hooker | Hobo Blues |  3:07,
  array[16] = John Lee Hooker | I Can't Quit You Baby |  3:02


Algorithm Elapsed Time: 0.1584 seconds.

Run #3:

Target time: 4300
Sublist -----------------------------
  sum: 4300
  array[0] = Carrie Underwood | Cowboy Casanova |  3:56,
  array[1] = Carrie Underwood | Quitter |  3:40,
  array[2] = Rihanna | Russian Roulette |  3:48,
  array[3] = Foo Fighters | All My Life |  4:23,
  array[4] = Foo Fighters | Monkey Wrench |  3:50,
  array[5] = Eric Clapton | Pretending |  4:43,
  array[6] = Eric Clapton | Bad Love |  5:08,
  array[7] = Howlin' Wolf | Everybody's In The Mood |  2:58,
  array[9] = Reverend Gary Davis | Samson and Delilah |  3:36,
  array[10] = Reverend Gary Davis | Twelve Sticks |  3:14,
  array[11] = Roy Buchanan | Hot Cha |  3:28,
  array[12] = Roy Buchanan | Green Onions |  7:23,
  array[13] = Janiva Magness | I'm Just a Prisoner |  3:50,
  array[14] = Janiva Magness | You Were Never Mine |  4:36,
  array[15] = John Lee Hooker | Hobo Blues |  3:07,
  array[17] = Snoop Dogg | That's The Homie |  5:43,
  array[18] = Snoop Dogg | Gangsta Luv |  4:17


Algorithm Elapsed Time: 0.5519 seconds.

------------------------------ */

/* Part C - use block comment to remove this version  */
// ---------------------------------------------------------------------------
// CS 1C Assignment #1
// Part C - generic Version

import cs_1c.*;
import java.text.*;
import java.util.*;

//------------------------------------------------------
public class Foothill
{
   // -------  main --------------
   public static void main(String[] args) throws Exception
   {
      int target = 3600;
      ArrayList<iTunesEntry> dataSet = new ArrayList<iTunesEntry>();
      ArrayList<Sublist<iTunesEntry>> choices
         = new ArrayList<Sublist<iTunesEntry>>();
      int k, j, numSets, max, kBest, arraySize, timeThisTune, masterSum;
      boolean foundPerfect;
      
      // for formatting and timing
      NumberFormat tidy = NumberFormat.getInstance(Locale.US);
      tidy.setMaximumFractionDigits(4);
      long startTime, stopTime;
      
      // read the iTunes Data
      iTunesEntryReader tunesInput = new iTunesEntryReader("itunes_file.txt");

      // test the success of the read:
      if (tunesInput.readError())
      {
         System.out.println("couldn't open " + tunesInput.getFileName()
            + " for input.");
         return;
      }

      // load the dataSet ArrayList with the iTunes:
      arraySize = tunesInput.getNumTunes();
      for (k = 0; k < arraySize; k++)
         dataSet.add(tunesInput.getTune(k));

      choices.clear();
      System.out.println("Target time: " + target);
      
      // dispose of easy case immediately to save lots ot time
      masterSum = (int)computeMasterSum(dataSet);
      if ( target >= masterSum )
      {
         System.out.println( "Solution is entire master set with sum = "
               +  masterSum );
         showEntireVector(dataSet);
         return;
      }
      
      // START TIMING THE ALGORITHM
      startTime = System.nanoTime();
      choices.add( new Sublist<iTunesEntry>( dataSet ) ); // this represents the 0 set

      foundPerfect = false;
      for (k = 0; k < dataSet.size() && !foundPerfect; k++)
      {
         // for each set so far create a new one containing that set U k
         numSets = choices.size(); // size before we start adding more
         for (j = 0; j < numSets; j++)
         {
            timeThisTune = dataSet.get(k).getTime();
            if (choices.get(j).getSum() + timeThisTune <= target)
               choices.add( choices.get(j).addItem(k, timeThisTune) );

            if (choices.get(j).getSum() + dataSet.get(k).getTime() == target)
            {
               foundPerfect = true;
               break;
            }
         }
      }

      max = kBest = 0;
      for (k = 0; k < choices.size(); k++ )
      {
         if ( choices.get(k).getSum() > max )
         {
            max = choices.get(k).getSum();
            kBest = k;
         }
      }

      // END TIMING
      stopTime = System.nanoTime();
      
      choices.get(kBest).showSublist();
      
      // report algorithm time
      System.out.println("Algorithm Elapsed Time: "
         + tidy.format( (stopTime - startTime) / 1e9)
         + " seconds.");
   }
   
   // client algorithm helper functions ---------------------------
   static double computeMasterSum( ArrayList<iTunesEntry> data )
   {
      int k, numSets;
      double masterSum;

      numSets = data.size();
      masterSum = 0;
      for (k = 0; k < numSets ; k++)
         masterSum += data.get(k).getTime();
      return masterSum;
   }
   
   static void showEntireVector( ArrayList<iTunesEntry> data )
   {
      int k, numSets;

      numSets = data.size();
      for (k = 0; k < numSets ; k++)
         System.out.print( "  array[" + k + "] = "
               +  data.get(k)
               + ( (k == numSets-1)? "\n\n" : ", " ) );  
   }
}

//--------------- Class Sublist Definition ---------------
class Sublist<E> implements Cloneable
{
   private int sum = 0;
   private ArrayList<E> originalObjects;
   private ArrayList<Integer> indices;
   
   // constructor creates an empty Sublist (no indices)
   public Sublist(ArrayList<E> orig)
   {
      sum = 0;
      originalObjects = orig;
      indices = new ArrayList<Integer>();
   }
   
   int getSum() { return sum; }
   
   public Object clone() throws CloneNotSupportedException
   {
      // shallow copy
      Sublist<E> newObject = (Sublist<E>)super.clone();
      // deep copy
      newObject.indices = (ArrayList<Integer>)indices.clone();
      
      return newObject;
   }
   
   Sublist<E> addItem( int indexOfItemToAdd, int valOfNewItem )
   {
      Sublist<E> newSublist;

      try
      {
         newSublist = (Sublist<E>)this.clone(); //  copy old values, then ...

         newSublist.sum = newSublist.sum
            + valOfNewItem;
         newSublist.indices.add(indexOfItemToAdd);
         return newSublist;
      }
      catch (CloneNotSupportedException e)
      {
         return null;
      }
   }
   
   void showSublist()
   {
      int k;
      
      System.out.println("Sublist ----------------------------- ");
      System.out.println("  sum: "+ sum);
      for ( k = 0; k < (int)indices.size(); k++)
         System.out.println("  array[" + indices.get(k) + "] = "
            + originalObjects.get( indices.get(k) )
            + ( (k == (int)indices.size() - 1)? "\n\n" : ", " ) );  
   }

}

/* --------- output -----------

Target time: 4300
Sublist -----------------------------
  sum: 4300
  array[0] = Carrie Underwood | Cowboy Casanova |  3:56,
  array[1] = Carrie Underwood | Quitter |  3:40,
  array[2] = Rihanna | Russian Roulette |  3:48,
  array[3] = Foo Fighters | All My Life |  4:23,
  array[4] = Foo Fighters | Monkey Wrench |  3:50,
  array[5] = Eric Clapton | Pretending |  4:43,
  array[6] = Eric Clapton | Bad Love |  5:08,
  array[7] = Howlin' Wolf | Everybody's In The Mood |  2:58,
  array[9] = Reverend Gary Davis | Samson and Delilah |  3:36,
  array[10] = Reverend Gary Davis | Twelve Sticks |  3:14,
  array[11] = Roy Buchanan | Hot Cha |  3:28,
  array[12] = Roy Buchanan | Green Onions |  7:23,
  array[13] = Janiva Magness | I'm Just a Prisoner |  3:50,
  array[14] = Janiva Magness | You Were Never Mine |  4:36,
  array[15] = John Lee Hooker | Hobo Blues |  3:07,
  array[17] = Snoop Dogg | That's The Homie |  5:43,
  array[18] = Snoop Dogg | Gangsta Luv |  4:17


Algorithm Elapsed Time: 0.5519 seconds.

Target time: 36000
Solution is entire master set with sum = 22110
  array[0] = Carrie Underwood | Cowboy Casanova |  3:56,   array[1] = Carrie Und
erwood | Quitter |  3:40,   array[2] = Rihanna | Russian Roulette |  3:48,   arr
ay[3] = Foo Fighters | All My Life |  4:23,   array[4] = Foo Fighters | Monkey W
rench |  3:50,   array[5] = Eric Clapton | Pretending |  4:43,   array[6] = Eric
 Clapton | Bad Love |  5:08,   array[7] = Howlin' Wolf | Everybody's In The Mood
 |  2:58,   array[8] = Howlin' Wolf | Well That's All Right |  2:55,   array[9]
= Reverend Gary Davis | Samson and Delilah |  3:36,   array[10] = Reverend Gary
Davis | Twelve Sticks |  3:14,   array[11] = Roy Buchanan | Hot Cha |  3:28,   a
rray[12] = Roy Buchanan | Green Onions |  7:23,   array[13] = Janiva Magness | I
'm Just a Prisoner |  3:50,   array[14] = Janiva Magness | You Were Never Mine |
  4:36,   array[15] = John Lee Hooker | Hobo Blues |  3:07,   array[16] = John L
ee Hooker | I Can't Quit You Baby |  3:02,   array[17] = Snoop Dogg | That's The
 Homie |  5:43,   array[18] = Snoop Dogg | Gangsta Luv |  4:17,   array[19] = Th
e Rubyz | Ladies and Gentleman |  3:21,   array[20] = The Rubyz | Watch the Girl
 |  3:12,   array[21] = Veggie Tales | Donuts for Benny |  3:04,   array[22] = V
eggie Tales | Our Big Break |  1:09,   array[23] = Berliner Philharmoniker | Bra
hms: Symphony No. 1 in C Minor Op. 68 |  13:59,   array[24] = Berliner Philharmo
niker | Brahms: Symphony No. 4 in E Minor Op. 98 |  13:20,   array[25] = Yo-yo M
a | Bach: Suite for Cello No. 1 in G Major Prelude |  2:21,   array[26] = Yo-yo
Ma | Simple Gifts |  2:34,   array[27] = Ry Cooter | Alimony |  2:55,   array[28
] = Ry Cooter | France Chance |  2:48,   array[29] = Aaron Watson | The Road |  
3:24,   array[30] = Terra Incognita | Clone |  4:58,   array[31] = Terra Incogni
 | Lizard Skin |  4:30,   array[32] = Blue Record | Bullhead's Psalm |  1:19,   
array[33] = Blue Record | Ogeechee Hymnal |  2:35,   array[34] = Mastadon | Obli
vion |  5:48,   array[35] = Mastadon | The Bit |  4:55,   array[36] = Sean Kings
ton | Fire Burning |  3:59,   array[37] = Sean Kingston | My Girlfriend |  3:24,
   array[38] = T-Pain | Take Your Shirt Off |  3:48,   array[39] = Lil Jon | Giv
e It All U Got |  3:38,   array[40] = Jay-Z | What We Talkin' About |  4:03,   a
rray[41] = Jay-Z | Empire State of Mind |  4:36,   array[42] = Snoop Dog | Think
 About It |  3:37,   array[43] = Snoop Dog | Lil' Crips |  3:15,   array[44] = J
eff Golub | Shuffleboard |  3:30,   array[45] = Jeff Golub | Goin' On |  5:56,  
 array[46] = Jeff Golub | Fish Fare |  4:59,   array[47] = Caraivana | Noites Ca
riocas |  4:12,   array[48] = Caraivana | Tico-Tico No Fuba |  2:27,   array[49]
 = John Patitucci | Monk/Trane |  7:14,   array[50] = John Patitucci | Sonny Sid
e |  7:25,   array[51] = Nina Simone | Pirate Jenny |  6:42,   array[52] = Nina
Simone | The Other Woman |  3:06,   array[53] = Nina Simone | Feeling Good |  2:
57,   array[54] = John Coltrane | A Love Supreme Part 1 |  7:42,   array[55] = J
ohn Coltrane | In a Sentimental Mood |  4:16,   array[56] = AOL Dejando Huellas
| Dime Si te Vas Con El |  3:24,   array[57] = AOL Dejando Huella | Te Amo Tanto
 |  3:12,   array[58] = McCoy Tyner | Blues On the Corner |  6:07,   array[59] =
 McCoy Tyner | Afro Blue |  12:22,   array[60] = Kanye West | Stronger |  5:11,
  array[61] = Kanye West | Good Life |  3:27,   array[62] = Steely Dan | Black C
ow |  5:10,   array[63] = Steely Dan | Kid Charlemagne |  4:38,   array[64] = St
eely Dan | Haitian Divorce |  5:51,   array[65] = Herbie Hancock | Nefertiti |  
7:31,   array[66] = Herbie Hancock | Rockit |  5:25,   array[67] = Herbie Hancoc
k | Chameleon |  15:41,   array[68] = Return to Forever | Medieval Overture |  5
:13,   array[69] = Suzanne Vega | Luka |  3:51,   array[70] = Suzanne Vega | Sma
ll Blue Thing |  3:55,   array[71] = Bonnie Raitt | Something to Talk About |  3
:47,   array[72] = Bonnie Raitt | I Can't Make You Love Me |  5:31,   array[73]
= Natalie Cole | This Will Be |  2:51,   array[74] = Natalie Cole | Unforgettabl
e |  3:31,   array[75] = Jet | Timothy |  4:20,   array[76] = Jet | Rip It Up |
 3:20,   array[77] = Was (Not Was) | Where Did Your Heart Go? |  5:47,   array[7
8] = Was (Not Was) | I Blew Up The United States |  3:50


.----------------------------- */